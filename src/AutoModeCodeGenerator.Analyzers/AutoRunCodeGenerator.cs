//using System.Diagnostics;
//using System.Text;
//using Microsoft.CodeAnalysis;
//using Microsoft.CodeAnalysis.CSharp.Syntax;
//using Microsoft.CodeAnalysis.Text;

////namespace 自动代码生成;

//[Generator(LanguageNames.CSharp)]
//public partial class AutoRunCodeGenerator : IIncrementalGenerator
//{
//    private const string autoCodeClassModesAttributeStr = "AutoCodeGenerator.AutoCodeRunClassBaseAttribute";
//    private string autoCodeAttribute => SourceGeneratorHelper.AutoGenerated + @"
//#nullable enable
//using System;
//namespace AutoCodeGenerator
//{
//    /// <summary>
//    /// 
//    /// </summary>
//    [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)]
//    public abstract class AutoCodeRunClassBaseAttribute : Attribute
//    {
//    }
//}";

//    public void Initialize(IncrementalGeneratorInitializationContext context)
//    {
//        //对于Source Generator可以通过添加`Debugger.Launch()`的形式进行对编译时的生成器进行调试，可以通过它很便捷的一步步调试代码.
//        //Debugger.Launch();

//        //AdditionalFiles 获取当前编译项目文件中的所有AdditionalFiles标签
//        //Compilation 编译上下文，最重要的对象
//        //AddSource 向编译器加入代码，最重要的方法广告

//        context.RegisterPostInitializationOutput(ctx => { ctx.AddSource("AutoCodeAttribute.g.cs", SourceText.From(autoCodeAttribute, Encoding.UTF8)); });

//        var compilation = context.CompilationProvider;

//        var provider = context.SyntaxProvider.CreateSyntaxProvider((SyntaxNode syntaxNode, CancellationToken cancellationToken) =>
//        {
//            if(syntaxNode.IsKind(Microsoft.CodeAnalysis.CSharp.SyntaxKind.ClassDeclaration)&& syntaxNode is Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax symbol)
//            {
//                //symbol.AttributeLists.Select(f=>f.Target.GetReference())
//                return true;
//            }
//            return false;
//        },
//        (GeneratorSyntaxContext context, CancellationToken cancellationToken) =>
//        {
//            var symbol = context.Node as Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax;
//            return symbol;
//        });
//        var combined = provider.Combine(compilation);

//        context.RegisterSourceOutput(combined, static (ctx, result) =>
//        {
//            var symbol = result.Left;
//            try
//            {
//                var InvalidError = new DiagnosticDescriptor(id: "Mccj002", title: "代码生成异常", messageFormat: symbol?.ToFullString()??"dddddd", category: nameof(AutoRunCodeGenerator), DiagnosticSeverity.Error, isEnabledByDefault: true);
//                ctx.ReportDiagnostic(Diagnostic.Create(InvalidError, Location.None, symbol.ToString()));

//                //Debugger.Launch();
//                //var sss1 = symbol.ToDisplayString(new SymbolDisplayFormat(globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Included, typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces, genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters, miscellaneousOptions: SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers | SymbolDisplayMiscellaneousOptions.UseSpecialTypes));
//                //var sss2 = symbol.ToDisplayString(new SymbolDisplayFormat(globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Included, typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces, genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters, miscellaneousOptions: SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers | SymbolDisplayMiscellaneousOptions.UseSpecialTypes));
//                ////var sss2 = symbol.ToDisplayString(new SymbolDisplayFormat(globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,                                                                                                   genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters, memberOptions: SymbolDisplayMemberOptions.IncludeParameters | SymbolDisplayMemberOptions.IncludeType | SymbolDisplayMemberOptions.IncludeRef | SymbolDisplayMemberOptions.IncludeContainingType, kindOptions: SymbolDisplayKindOptions.IncludeMemberKeyword, parameterOptions: SymbolDisplayParameterOptions.IncludeName | SymbolDisplayParameterOptions.IncludeType | SymbolDisplayParameterOptions.IncludeParamsRefOut | SymbolDisplayParameterOptions.IncludeDefaultValue, localOptions: SymbolDisplayLocalOptions.IncludeType, miscellaneousOptions: SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers | SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier));
//                //var sss3 = symbol.ToDisplayString(SymbolDisplayFormat.MinimallyQualifiedFormat);

//                //var fileName = "aaa.text.cs";//$"{(symbol.ContainingNamespace?.IsGlobalNamespace == true ? "_" : symbol.ContainingNamespace?.ToDisplayString())}.{symbol.Name}";
//                //var sourceCode = "/*    */";

//                //ctx.AddSource($"{fileName}.g.cs", SourceText.From(sourceCode, Encoding.UTF8));
//            }
//            catch (Exception ex)
//            {
//                var InvalidError = new DiagnosticDescriptor(id: "Mccj003", title: "代码生成异常", messageFormat: "代码生成异常 '{0}'-{1}.", category: nameof(AutoRunCodeGenerator), DiagnosticSeverity.Error, isEnabledByDefault: true, description: ex.StackTrace);
//                //ctx.ReportDiagnostic(Diagnostic.Create(InvalidError, Location.None, $"{symbol.ToDisplayString()}.g.cs", ex.Message));
//            }
//        });

//    }

//}
